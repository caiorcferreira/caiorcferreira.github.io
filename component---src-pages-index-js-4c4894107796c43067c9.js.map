{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/Bio.component.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.small.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","location","map","node","frontmatter","fields","slug","key","PostTittle","style","boxShadow","to","PostMetadataItem","date","timeToRead","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","styled","h3","rhythm","small","pageQuery","BioWrapper","div","Avatar","Image","bioQuery","Bio","query","author","fixed","avatar","childImageSharp","alt","imgStyle","borderRadius","createHTML"],"mappings":"6NASMA,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQC,SAAUT,KAAKC,MAAMQ,SAAUJ,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,SACX,kBAAC,IAAD,MACCC,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNN,EAAQM,EAAKC,YAAYP,OAASM,EAAKE,OAAOC,KAEpD,OACE,yBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,kBAACE,EAAD,KACE,kBAAC,OAAD,CAAMC,MAAO,CAAEC,UAAU,QAAWC,GAAIR,EAAKE,OAAOC,MACjDT,IAGL,8BACE,kBAACe,EAAD,KAAmBT,EAAKC,YAAYS,MADtC,IAES,IACP,kBAACD,EAAD,KAAmBT,EAAKW,WAAxB,cAEF,uBACEC,wBAAyB,CACvBC,OAAQb,EAAKC,YAAYa,aAAed,EAAKe,iB,GA3BvCC,IAAMC,WAsCxBZ,EAAaa,IAAOC,GAAV,oEAAGD,CAAH,uBACGE,YAAO,MAGpBX,EAAmBS,IAAOG,MAAV,0EAAGH,CAAH,sBACJE,YAAO,KAGVlC,YAER,IAAMoC,EAAS,c,+GCvBtB,IAAMC,EAAaL,IAAOM,IAAV,+EAAGN,CAAH,iCAEAE,YAAO,IAGjBK,EAASP,YAAOQ,KAAV,2EAAGR,CAAH,wEACME,YAAO,KAMnBO,EAAQ,aAiBCC,IAxDf,WACE,OACE,kBAAC,cAAD,CACEC,MAAOF,EACPxC,OAAQ,SAAAC,GAAS,IACP0C,EAAW1C,EAAKI,KAAKC,aAArBqC,OACR,OACE,kBAACP,EAAD,KACE,kBAACE,EAAD,CACEM,MAAO3C,EAAK4C,OAAOC,gBAAgBF,MACnCG,IAAKJ,EACLK,SAAU,CACRC,aAAa,SAGjB,6HAbR,W,kkFCPJ,EAAQ,IAAR,CAA0B,SAAS,SAAUC,GAC3C,OAAO,WACL,OAAOA,EAAWhD,KAAM,QAAS,GAAI","file":"component---src-pages-index-js-4c4894107796c43067c9.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/Bio.component\"\nimport Layout from \"../components/Layout.component\"\nimport SEO from \"../components/Seo.component\"\nimport { rhythm } from \"../utils/typography\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"Home\" />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n\n          return (\n            <div key={node.fields.slug}>\n              <PostTittle>\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </PostTittle>\n              <span>\n                <PostMetadataItem>{node.frontmatter.date}</PostMetadataItem>\n                &bull;{\" \"}\n                <PostMetadataItem>{node.timeToRead} min read</PostMetadataItem>\n              </span>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nconst PostTittle = styled.h3`\n  margin-bottom: ${rhythm(1 / 4)};\n`\n\nconst PostMetadataItem = styled.small`\n  margin-right: ${rhythm(1 / 10)};\n`\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Image from \"gatsby-image\"\nimport styled from \"styled-components\"\n\nimport { StaticQuery, graphql } from \"gatsby\"\nimport { rhythm } from \"../utils/typography\"\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author } = data.site.siteMetadata\n        return (\n          <BioWrapper>\n            <Avatar\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              imgStyle={{\n                borderRadius: `50%`,\n              }}\n            />\n            <p>\n              I am passionate by functional programming, software architecture\n              and making simple code.\n              {` `}\n            </p>\n          </BioWrapper>\n        )\n      }}\n    />\n  )\n}\n\nconst BioWrapper = styled.div`\n  display: flex;\n  margin-top: ${rhythm(1)};\n`\n\nconst Avatar = styled(Image)`\n  margin-right: ${rhythm(1 / 2)};\n  margin-bottom: 0;\n  min-width: 50px;\n  border-radius: 100%;\n`\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/me.png/\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n      }\n    }\n  }\n`\n\nexport default Bio\n","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n"],"sourceRoot":""}