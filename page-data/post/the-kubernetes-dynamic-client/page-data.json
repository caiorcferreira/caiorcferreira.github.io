{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/the-kubernetes-dynamic-client/","result":{"data":{"site":{"siteMetadata":{"title":"Caio Ferreira","author":"Caio Ferreira"}},"markdownRemark":{"id":"37565746-86e6-5bbc-ac0e-d2ee3a59c779","timeToRead":9,"excerpt":"The Kubernetes dynamic client Introduction Kubernetes won the battle for the cloud-native platform and the characteristic that makes me enjoy the most working…","html":"<h1>The Kubernetes dynamic client</h1>\n<h2>Introduction</h2>\n<p>Kubernetes won the battle for the cloud-native platform and the characteristic that makes me enjoy the most working with it is its extensibility. By providing an open model through the <code class=\"language-text\">kube-apiserver</code>, without splitting an internal and external interface, we can interact with the cluster and any other system to integrate both from the same application (Controller) and even use custom resources to describe our unique operations, know as the <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Operator Pattern</a>.</p>\n<p>Although one could use any HTTP Client to interact with the API Server, this is no simple task. There are many resources with different response structures and possible operations if we only consider the core resources on Kubernetes. Hence, Kubernetes itself provides a set of clients for easier integration through the <a href=\"http://k8s.io/client-go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">k8s.io/client-go</code></a> project.</p>\n<p>The most used client provided by this project is the <code class=\"language-text\">k8s.io/client-go/kubernets.ClientSet</code>, which is a typed client. What that means is that this interface provides exclusive methods for each resource on Kubernetes (think of Pods, Deployments, Services, everything!) and operation (Create, Get, List, Watch, Update, Patch and Delete). It is obvious why you should, whenever possible, prefer to use this client.</p>\n<p>However, there are situations where this can be limiting. It is when <code class=\"language-text\">k8s.io/client-go/dynamic.Interface</code>, the dynamic client, will enter the game. This client has a twofold purpose:</p>\n<p>First, it allows working with custom resources while avoiding strong dependencies. If you want to build some automation or workflow using another Operator as the building block, like ExternalDNS, CertManager, or Prometheus (Operator) usually you would need to add these projects as dependencies to use their Go types and register them on your client instance. This obviously introduces a lot of burdens as you now need to manage their ever-evolving versions and try to keep the version you have installed on the cluster matching the version on your <code class=\"language-text\">go.mod</code>.</p>\n<p>Secondly, you can work with multiple or unknown resources. When your operator implements a generic logic that can interact with any common Kubernetes resource (from RBAC to Pods) and even custom resources, the dynamic client may be your only solution. A few examples are the garbage collection controller relies heavily on it and if you would want to add support for an arbitrary custom resource on a project like <a href=\"https://github.com/bitnami-labs/kubewatch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">KubeWatch</a>.</p>\n<p>Therefore, let’s dive into this resourceful (<em>pun intended</em>) component of the <a href=\"http://k8s.io/client-go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">k8s.io/client-go</code></a> project and see how we can leverage it.</p>\n<h2>Basic operations with the dynamic client</h2>\n<blockquote>\n<p>The code below assumes to be running inside a Kubernetes cluster.</p>\n</blockquote>\n<p>Many operations with the dynamic client is similar to the typed client, like creating a new instance can be done by providing the config to its constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">newClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>dynamic<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconfig<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">InClusterConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tdynClient<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> dynamic<span class=\"token punctuation\">.</span><span class=\"token function\">NewForConfig</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> dynClient<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since the dynamic client has no knowledge about the resource you want to consume, it does not provide helper methods like <code class=\"language-text\">CoreV1().Pod</code> . Instead, you need to first provide a <code class=\"language-text\">schema.GroupVersionResource</code>, which is a Golang type that provides the necessary information to construct an HTTP request to the cluster API Server.</p>\n<p>For example, if you want a function to list all MongoDB resources from the MongoDB Community Operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> monboDBResource <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span>GroupVersionResource<span class=\"token punctuation\">{</span>Group<span class=\"token punctuation\">:</span> <span class=\"token string\">\"mongodbcommunity.mongodb.com\"</span><span class=\"token punctuation\">,</span> Version<span class=\"token punctuation\">:</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span> Resource<span class=\"token punctuation\">:</span> <span class=\"token string\">\"mongodbcommunity\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">ListMongoDB</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> client dynamic<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> namespace <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>unstructured<span class=\"token punctuation\">.</span>Unstructured<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// GET /apis/mongodbcommunity.mongodb.com/v1/namespaces/{namespace}/mongodbcommunity/</span>\n\tlist<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span>monboDBResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Namespace</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span>Items<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that if you are dealing with a namespaced resource then <code class=\"language-text\">.Namespace(namespace)</code> is obligatory, even if you will use an empty string to list on all namespaces.</p>\n<p>In this snippet, we can see the main companion of the dynamic client: <code class=\"language-text\">unstructured.Unstructured</code>. This is a special type that encapsulates an arbitrary JSON while also complying with standard Kubernetes interfaces like <code class=\"language-text\">runtime.Object</code> , but most importantly it provides a set of helpers on the <code class=\"language-text\">unstructured</code> package to manipulate this data.</p>\n<p>Expanding our example, if we would scale a MongoDB by an proportion we could do so like:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// ScaleMongoDB changes the number of members by the given proportion,</span>\n<span class=\"token comment\">// which should be 0 =&lt; proportion &lt; 1.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ScaleMongoDB</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> client dynamic<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> namespace <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> proportion <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> proportion <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proportion should be between 0 =&lt; proportion &lt; 1\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tmongoDBClient <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span>monboDBResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Namespace</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span>\n\tmdb<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mongoDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> metav1<span class=\"token punctuation\">.</span>GetOptions<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\tmembers<span class=\"token punctuation\">,</span> found<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> unstructured<span class=\"token punctuation\">.</span><span class=\"token function\">NestedInt64</span><span class=\"token punctuation\">(</span>mdb<span class=\"token punctuation\">.</span><span class=\"token function\">UnstructuredContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spec\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"members\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>found <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"members field not found on MongoDB spec\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tscaled <span class=\"token operator\">:=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>members<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>proportion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tpatch <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"op\"</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">\"replace\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span>  <span class=\"token string\">\"/spec/members\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> scaled<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tpayload<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>patch<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> mongoDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">Patch</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>JSONPatchType<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> metav1<span class=\"token punctuation\">.</span>PatchOptions<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we leverage <code class=\"language-text\">unstructured.NestedInt64</code> to access only the field that we are interested in, keeping our coupling to the MongoDB CRD to a minimum while also being able to manipulate the resource data with type safety.</p>\n<p>The <code class=\"language-text\">unstructured</code> package has lots of helpers like this, not only for reading but also for writing to any field on the resource.</p>\n<p>Performing all the usual operations on Kubernetes (get, list, watch, create, patch, and delete) follow the same approach: provide the <code class=\"language-text\">scheme.GroupVersionResource</code> and handle the <code class=\"language-text\">unstructured.Unstructured</code> result.</p>\n<h2>Controller with a dynamic client</h2>\n<p>More advanced but frequent use of a Kubernetes client is to build a controller that reacts to changes on the actual cluster state to bring it to the desired state.</p>\n<p>Usually, we leverage an Informer, a component provided by <code class=\"language-text\">k8s.io/client-go</code>, that runs a handler when changes are detected, created from a typed client. Luckily the <code class=\"language-text\">dynamic</code> package also provides an Informer component that we can use.</p>\n<p>For example, if we want to capture when a MongoDB is deleted to clean the associated <code class=\"language-text\">PersistentVolumeClaims</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\tutilruntime <span class=\"token string\">\"k8s.io/apimachinery/pkg/util/runtime\"</span>\n\t<span class=\"token string\">\"k8s.io/apimachinery/pkg/util/wait\"</span>\n\t<span class=\"token string\">\"k8s.io/client-go/dynamic\"</span>\n\t<span class=\"token string\">\"k8s.io/client-go/dynamic/dynamicinformer\"</span>\n\t<span class=\"token string\">\"k8s.io/client-go/tools/cache\"</span>\n\t<span class=\"token string\">\"k8s.io/client-go/util/workqueue\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> maxRetries <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n<span class=\"token keyword\">var</span> monboDBResource <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span>GroupVersionResource<span class=\"token punctuation\">{</span>Group<span class=\"token punctuation\">:</span> <span class=\"token string\">\"mongodbcommunity.mongodb.com\"</span><span class=\"token punctuation\">,</span> Version<span class=\"token punctuation\">:</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span> Resource<span class=\"token punctuation\">:</span> <span class=\"token string\">\"mongodbcommunity\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> MongoDBController <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tinformer cache<span class=\"token punctuation\">.</span>SharedIndexInformer\n\tstopper  <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tqueue    workqueue<span class=\"token punctuation\">.</span>RateLimitingInterface\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewMongoDBController</span><span class=\"token punctuation\">(</span>client dynamic<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>MongoDBController<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdynInformer <span class=\"token operator\">:=</span> dynamicinformer<span class=\"token punctuation\">.</span><span class=\"token function\">NewDynamicSharedInformerFactory</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tinformer <span class=\"token operator\">:=</span> dynInformer<span class=\"token punctuation\">.</span><span class=\"token function\">ForResource</span><span class=\"token punctuation\">(</span>monboDBResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Informer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tstopper <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tqueue <span class=\"token operator\">:=</span> workqueue<span class=\"token punctuation\">.</span><span class=\"token function\">NewRateLimitingQueue</span><span class=\"token punctuation\">(</span>workqueue<span class=\"token punctuation\">.</span><span class=\"token function\">DefaultControllerRateLimiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tinformer<span class=\"token punctuation\">.</span><span class=\"token function\">AddEventHandler</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span>ResourceEventHandlerFuncs<span class=\"token punctuation\">{</span>\n\t\tDeleteFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tkey<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">DeletionHandlingMetaNamespaceKeyFunc</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>MongoDBController<span class=\"token punctuation\">{</span>\n\t\tinformer<span class=\"token punctuation\">:</span> informer<span class=\"token punctuation\">,</span>\n\t\tqueue<span class=\"token punctuation\">:</span> queue<span class=\"token punctuation\">,</span>\n\t\tstopper<span class=\"token punctuation\">:</span> stopper<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>MongoDBController<span class=\"token punctuation\">)</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>stopper<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>MongoDBController<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> utilruntime<span class=\"token punctuation\">.</span><span class=\"token function\">HandleCrash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">ShutDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">go</span> m<span class=\"token punctuation\">.</span>informer<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>stopper<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// wait for the caches to synchronize before starting the worker</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">WaitForCacheSync</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>stopper<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>informer<span class=\"token punctuation\">.</span>HasSynced<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tutilruntime<span class=\"token punctuation\">.</span><span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timed out waiting for caches to sync\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// runWorker will loop until some problem happens. The wait.Until will then restart the worker after one second</span>\n\twait<span class=\"token punctuation\">.</span><span class=\"token function\">Until</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>runWorker<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>stopper<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>MongoDBController<span class=\"token punctuation\">)</span> <span class=\"token function\">runWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tkey<span class=\"token punctuation\">,</span> quit <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> quit <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\terr <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">processItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tm<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">Forget</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> m<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">NumRequeues</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> maxRetries <span class=\"token punctuation\">{</span>\n\t\t\tm<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">AddRateLimited</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tm<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">Forget</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t\t\tutilruntime<span class=\"token punctuation\">.</span><span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tm<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>MongoDBController<span class=\"token punctuation\">)</span> <span class=\"token function\">processItem</span><span class=\"token punctuation\">(</span>mongodb <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Clean up PVCs</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Most of this code is standard, like the work queue, informer event handlers, and item processing, of a controller using the typed client.</p>\n<p>Hence, leveraging the decoupling provided by the dynamic client really comes with a low overhead in terms of complexity.</p>\n<h2>Testing with the dynamic client</h2>\n<p>If we were to scale the use of the dynamic client it is paramount that it is as easy to test as the typed client.</p>\n<p>As in the controller case, the <code class=\"language-text\">dynamic</code> package provides an equivalent fake client that allows for stubbing objects and asserting actions performed using it.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"k8s.io/apimachinery/pkg/runtime\"</span>\n\tdynamicfake <span class=\"token string\">\"k8s.io/client-go/dynamic/fake\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestDynamicClient</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Setup an Object as mock on the client</span>\n\t<span class=\"token comment\">// Write it like its YAML manifest</span>\n\tmdb <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>unstructured<span class=\"token punctuation\">.</span>Unstructured<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tmdb<span class=\"token punctuation\">.</span><span class=\"token function\">SetUnstructuredContent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"apiVersion\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mongodbcommunity.mongodb.com/v1\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"kind\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"MongoDBCommunity\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"metadata\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span>      <span class=\"token string\">\"mongodb-test\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"namespace\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"spec\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"members\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tdynamicClient <span class=\"token operator\">:=</span> dynamicfake<span class=\"token punctuation\">.</span><span class=\"token function\">NewSimpleDynamicClient</span><span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">NewScheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mdb<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Run any logic that depend on the dynamic client</span>\n  <span class=\"token function\">NotifyMongoDBs</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dynamicClient<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">AssertActions</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>  dynamicClient<span class=\"token punctuation\">.</span><span class=\"token function\">Actions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ExpectedAction<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tVerb<span class=\"token punctuation\">:</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span>\n\t\t\tNamespace<span class=\"token punctuation\">:</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span>\n\t\t\tResource<span class=\"token punctuation\">:</span> <span class=\"token string\">\"mongodbcommunity\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using the <code class=\"language-text\">unestructured.Unestructured</code> type we can create stub Kubernetes objects using the same syntax as in YAML, but with maps.</p>\n<p>After performing the tested logic we can use <code class=\"language-text\">dynamicClient.Actions()</code> to see all operations that were performed by our code. However, manually asserting these actions on every test often lead to unreadable code and brittle assertions.</p>\n<p>Hence, I often use a special assertion function <code class=\"language-text\">AssertActions</code> that verify if every expected action can be found in the performed actions. An important note is that this function does not perform an exact list match, i.e. if a delete operation was performed using the client the test would not break, the only condition for the <code class=\"language-text\">AssertActions</code> to fail is if the list operation provided on the expected list isn’t found. One could change the asserting function or make a sibling function that validates only if the expected actions were performed.</p>\n<p>Although the current implementation is verbose, this function has the benefit of working both with the dynamic and the typed client.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ExpectedAction <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tVerb <span class=\"token builtin\">string</span>\n\tName <span class=\"token builtin\">string</span>\n\tNamespace <span class=\"token builtin\">string</span>\n\tResource <span class=\"token builtin\">string</span>\n\n\t<span class=\"token comment\">// Patch action</span>\n\tPatchType types<span class=\"token punctuation\">.</span>PatchType\n\tPatchPayload <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">AssertActions</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> got <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>kubetesting<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">,</span> expected <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ExpectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>got<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"executed actions too short, expected %d, got %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>got<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> expectedAction <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> expected <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">AssertExpectedAction</span><span class=\"token punctuation\">(</span>got<span class=\"token punctuation\">,</span> expectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"action %d does not match any of the got actions\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">AssertExpectedAction</span><span class=\"token punctuation\">(</span>got <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>kubetesting<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">,</span> expectedAction ExpectedAction<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> gotAction <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> got <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">switch</span> expectedAction<span class=\"token punctuation\">.</span>Verb <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">:</span>\n\t\t\tgetAction<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> gotAction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>kubetesting<span class=\"token punctuation\">.</span>GetAction<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> getAction<span class=\"token punctuation\">.</span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> expectedAction<span class=\"token punctuation\">.</span>Name <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">validateNamespaceAndResource</span><span class=\"token punctuation\">(</span>getAction<span class=\"token punctuation\">,</span> expectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">:</span>\n\t\t\tlistAction<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> gotAction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>kubetesting<span class=\"token punctuation\">.</span>ListAction<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">validateNamespaceAndResource</span><span class=\"token punctuation\">(</span>listAction<span class=\"token punctuation\">,</span> expectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">:</span>\n\t\t\twatchAction<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> gotAction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>kubetesting<span class=\"token punctuation\">.</span>WatchAction<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">validateNamespaceAndResource</span><span class=\"token punctuation\">(</span>watchAction<span class=\"token punctuation\">,</span> expectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"create\"</span><span class=\"token punctuation\">:</span>\n\t\t\tcreateAction<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> gotAction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>kubetesting<span class=\"token punctuation\">.</span>CreateAction<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">validateNamespaceAndResource</span><span class=\"token punctuation\">(</span>createAction<span class=\"token punctuation\">,</span> expectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">:</span>\n\t\t\tupdateAction<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> gotAction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>kubetesting<span class=\"token punctuation\">.</span>UpdateAction<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">validateNamespaceAndResource</span><span class=\"token punctuation\">(</span>updateAction<span class=\"token punctuation\">,</span> expectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">:</span>\n\t\t\tdeleteAction<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> gotAction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>kubetesting<span class=\"token punctuation\">.</span>DeleteAction<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> deleteAction<span class=\"token punctuation\">.</span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> expectedAction<span class=\"token punctuation\">.</span>Name <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">validateNamespaceAndResource</span><span class=\"token punctuation\">(</span>deleteAction<span class=\"token punctuation\">,</span> expectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"patch\"</span><span class=\"token punctuation\">:</span>\n\t\t\tpatchAction<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> gotAction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>kubetesting<span class=\"token punctuation\">.</span>PatchAction<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> patchAction<span class=\"token punctuation\">.</span><span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> expectedAction<span class=\"token punctuation\">.</span>Name <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">validateNamespaceAndResource</span><span class=\"token punctuation\">(</span>patchAction<span class=\"token punctuation\">,</span> expectedAction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> patchAction<span class=\"token punctuation\">.</span><span class=\"token function\">GetPatchType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> expectedAction<span class=\"token punctuation\">.</span>PatchType <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tpatchBytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>expectedAction<span class=\"token punctuation\">.</span>PatchPayload<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>patchAction<span class=\"token punctuation\">.</span><span class=\"token function\">GetPatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> patchBytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">validateNamespaceAndResource</span><span class=\"token punctuation\">(</span>action kubetesting<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">,</span> expectedAction ExpectedAction<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">GetNamespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> expectedAction<span class=\"token punctuation\">.</span>Namespace <span class=\"token operator\">&amp;&amp;</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">GetResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Resource <span class=\"token operator\">==</span> expectedAction<span class=\"token punctuation\">.</span>Resource\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This asserting function allows for more conditions to be added, like verifying list/watch restrictions and create/update bodies.</p>\n<h2>Conclusion</h2>\n<p>The Kubernetes ecosystem is rich and every now and then we stumble upon this kind of treasure. I strongly recommend reading through the documentation not only of the <a href=\"http://k8s.io/client-go\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">k8s.io/client-go</code></a> but also other like <a href=\"https://pkg.go.dev/sigs.k8s.io/controller-runtime\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">sigs.k8s.io/controller-runtime</code></a> project and the <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kubernetes Reference API</a> documentation.</p>","frontmatter":{"title":"The Kubernetes dynamic client","date":"May 28, 2021","description":"A dive into a hidden tool to build Controllers and Operators","tags":"Go,Kubernetes,Testing","cover_image":{"publicURL":"/static/9f0eaf646f5aa283fffbd26081ceefab/cover.png","childImageSharp":{"sizes":{"srcSet":"/static/9f0eaf646f5aa283fffbd26081ceefab/151a9/cover.png 310w,\n/static/9f0eaf646f5aa283fffbd26081ceefab/edb0e/cover.png 620w,\n/static/9f0eaf646f5aa283fffbd26081ceefab/f534f/cover.png 1240w,\n/static/9f0eaf646f5aa283fffbd26081ceefab/25c5f/cover.png 1245w","sizes":"(max-width: 1240px) 100vw, 1240px","src":"/static/9f0eaf646f5aa283fffbd26081ceefab/f534f/cover.png","aspectRatio":1.7318435754189945}}}}}},"pageContext":{"slug":"/post/the-kubernetes-dynamic-client/","previous":{"fields":{"slug":"/post/introducing-cache-in-your-system/"},"frontmatter":{"title":"Introducing Cache in your System"}},"next":null}},"staticQueryHashes":["143701507","3694326227","88017042"]}